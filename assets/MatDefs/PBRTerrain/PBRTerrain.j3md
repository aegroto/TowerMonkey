MaterialDef PBRTerrain {
    MaterialParameters {
        Texture2D PathTex
        Texture2D PathNormalMap
        Texture2D PathParallaxMap
        Float PathTexScale
        Float PathParallaxHeight

        Texture2D HillTex
        Texture2D HillNormalMap
        Texture2D HillParallaxMap
        Float HillTexScale
        Float HillParallaxHeight
        
        Texture2D MountainTex
        Texture2D MountainNormalMap
        Texture2D MountainParallaxMap
        Float MountainTexScale
        Float MountainParallaxHeight

        Float HillMinHeight
        Float MountainMinHeight

        Float PathMaxHeight
        Float HillMaxHeight

        Boolean TriPlanarMapping
        Boolean SteepParallax

        Float Shininess : 1.0
    }

    Technique {

        LightMode MultiPass

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            ViewMatrix
            NormalMatrix

            LightPosition
            LightDirection

            AmbientLightColor
            LightColor
        }

        Defines {
            TRIPLANAR_MAPPING : TriPlanarMapping
            STEEP_PARALLAX : SteepParallax
            PATH_NORMALMAP : PathNormalMap
            HILL_NORMALMAP : HillNormalMap
            MOUNTAIN_NORMALMAP : MountainNormalMap
            PATH_PARALLAXMAP : PathParallaxMap
            HILL_PARALLAXMAP : HillParallaxMap
            MOUNTAIN_PARALLAXMAP : MountainParallaxMap
        }

        VertexShaderNodes {
            ShaderNode TerrainPNT {
                Definition : TerrainPNT : MatDefs/PBRTerrain/ShaderNodes/VertexShaderNodes/TerrainPNT/TerrainPNT.j3sn
                InputMappings {
                    inPosition = Attr.inPosition;
                    inNormal = Attr.inNormal;
                    inTexCoord = Attr.inTexCoord;
                }
            }
            ShaderNode TerrainWorldView {
                Definition : TerrainWorldView : MatDefs/PBRTerrain/ShaderNodes/VertexShaderNodes/TerrainWorldView/TerrainWorldView.j3sn

                InputMappings {
                    inPosition = TerrainPNT.vPosition;
                    inNormal = TerrainPNT.vNormal;
                    inTangent = Attr.inTangent;

                    gWorldViewMatrix = WorldParam.WorldViewMatrix;
                    gNormalMatrix = WorldParam.NormalMatrix;
                    gViewMatrix = WorldParam.ViewMatrix;

                    gLightPosition = WorldParam.LightPosition;
                    gLightColor = WorldParam.LightColor;
                }
            }

            ShaderNode TerrainLightDir {
                Definition : TerrainLightDir : MatDefs/PBRTerrain/ShaderNodes/VertexShaderNodes/TerrainLightDir/TerrainLightDir.j3sn

                InputMappings {
                    worldViewPosition = TerrainWorldView.worldViewPosition;
                    worldViewNormal = TerrainWorldView.worldViewNormal;
                    worldViewDir = TerrainWorldView.worldViewDir;
                    worldViewLightPos = TerrainWorldView.worldViewLightPos;
                    worldViewTangent = TerrainWorldView.worldViewTangent;
                    worldViewBinormal = TerrainWorldView.worldViewBinormal;
                    tangentSpaceMat = TerrainWorldView.tangentSpaceMat;
                    
                    vLightDir = Attr.inLightDir;

                    gWorldViewMatrix = WorldParam.WorldViewMatrix;
                    gNormalMatrix = WorldParam.NormalMatrix;
                    gViewMatrix = WorldParam.ViewMatrix;

                    gLightPosition = WorldParam.LightPosition;
                    gLightColor = WorldParam.LightColor;
                }
            }

            ShaderNode TerrainProjection {
                Definition : TerrainProjection : MatDefs/PBRTerrain/ShaderNodes/VertexShaderNodes/TerrainProjection/TerrainProjection.j3sn

                InputMappings {
                    worldViewProjectionMatrix = WorldParam.WorldViewProjectionMatrix
                    inPosition = TerrainPNT.vPosition
                    inNormal = TerrainPNT.vNormal
                }

                OutputMappings {
                    Global.outPosition = projPosition
                }
            }
        }

        FragmentShaderNodes {
            ShaderNode TerrainTriplanarBlending {
                Definition : TerrainTriplanarBlending : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainTriplanarBlending/TerrainTriplanarBlending.j3sn

                InputMappings {
                    vNormal = TerrainPNT.vNormal;
                }
            }

            ShaderNode PathTerrainParallax {
                Definition : TerrainParallax : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainParallax/TerrainParallax.j3sn

                InputMappings {
                    vVertex = TerrainPNT.vPosition;
                    vViewDirParallax = TerrainLightDir.vViewDirParallax;
                    blending = TerrainTriplanarBlending.blending;
                    texCoord = TerrainPNT.texCoord;

                    parallaxHeight = MatParam.PathParallaxHeight;

                    parallaxMapTex = MatParam.PathParallaxMap;
                    texScale = MatParam.PathTexScale;
                }
            }

            ShaderNode HillTerrainParallax {
                Definition : TerrainParallax : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainParallax/TerrainParallax.j3sn

                InputMappings {
                    vVertex = TerrainPNT.vPosition;
                    vViewDirParallax = TerrainLightDir.vViewDirParallax;
                    blending = TerrainTriplanarBlending.blending;
                    texCoord = TerrainPNT.texCoord;

                    parallaxHeight = MatParam.HillParallaxHeight;

                    parallaxMapTex = MatParam.HillParallaxMap;
                    texScale = MatParam.HillTexScale;
                }
            }

            ShaderNode MountainTerrainParallax {
                Definition : TerrainParallax : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainParallax/TerrainParallax.j3sn

                InputMappings {
                    vVertex = TerrainPNT.vPosition;
                    vViewDirParallax = TerrainLightDir.vViewDirParallax;
                    blending = TerrainTriplanarBlending.blending;
                    texCoord = TerrainPNT.texCoord;

                    parallaxHeight = MatParam.MountainParallaxHeight;

                    parallaxMapTex = MatParam.MountainParallaxMap;
                    texScale = MatParam.MountainTexScale;
                }
            }

            ShaderNode PathTerrainFactor {
                Definition : TerrainLowestFactor : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainFactor/TerrainLowestFactor.j3sn
                
                InputMappings {               
                    vPosition = TerrainPNT.vPosition;
                    vVertex = PathTerrainParallax.vVertexParallax;
                    texCoord = PathTerrainParallax.texCoordParallax;

                    Tex = MatParam.PathTex;
                    TexScale = MatParam.PathTexScale;
                    blending = TerrainTriplanarBlending.blending;

                    LayerMaxHeight = MatParam.PathMaxHeight;

                    NextLayerMinHeight = MatParam.HillMinHeight;
                }
            }

            ShaderNode HillTerrainFactor {
                Definition : TerrainFactor : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainFactor/TerrainFactor.j3sn
                
                InputMappings {
                    vPosition = TerrainPNT.vPosition;
                    vVertex = HillTerrainParallax.vVertexParallax;
                    texCoord = HillTerrainParallax.texCoordParallax;

                    Tex = MatParam.HillTex;
                    TexScale = MatParam.HillTexScale;
                    blending = TerrainTriplanarBlending.blending;

                    PrevLayerMaxHeight = MatParam.PathMaxHeight;

                    LayerMinHeight = MatParam.HillMinHeight;
                    LayerMaxHeight = MatParam.HillMaxHeight;

                    NextLayerMinHeight = MatParam.MountainMinHeight;
                }
            }

            ShaderNode MountainTerrainFactor {
                Definition : TerrainHighestFactor : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainFactor/TerrainHighestFactor.j3sn
                
                InputMappings {
                    vPosition = TerrainPNT.vPosition;
                    vVertex = MountainTerrainParallax.vVertexParallax;
                    texCoord = MountainTerrainParallax.texCoordParallax;

                    Tex = MatParam.MountainTex;
                    TexScale = MatParam.MountainTexScale;
                    blending = TerrainTriplanarBlending.blending;

                    PrevLayerMaxHeight = MatParam.HillMaxHeight;

                    LayerMinHeight = MatParam.MountainMinHeight;
                }
            }

            ShaderNode PathTerrainNormal {
                Definition : TerrainNormal : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainNormal/TerrainNormal.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainPNT.vPosition;
                    vNormal = TerrainWorldView.worldViewNormal;

                    NormalMapTex = MatParam.PathNormalMap;
                    texCoord = PathTerrainParallax.texCoordParallax;
                    TexScale = MatParam.PathTexScale;
                    factor = PathTerrainFactor.factor;
                }
            }

            ShaderNode HillTerrainNormal {
                Definition : TerrainNormal : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainNormal/TerrainNormal.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainPNT.vPosition;
                    vNormal = TerrainWorldView.worldViewNormal;

                    NormalMapTex = MatParam.HillNormalMap;
                    texCoord = HillTerrainParallax.texCoordParallax;
                    TexScale = MatParam.HillTexScale;
                    factor = HillTerrainFactor.factor;
                }
            }

            ShaderNode MountainTerrainNormal {
                Definition : TerrainNormal : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainNormal/TerrainNormal.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainPNT.vPosition;
                    vNormal = TerrainWorldView.worldViewNormal;

                    NormalMapTex = MatParam.MountainNormalMap;
                    texCoord = MountainTerrainParallax.texCoordParallax;
                    TexScale = MatParam.MountainTexScale;
                    factor = MountainTerrainFactor.factor;
                }
            }

            ShaderNode PathTerrainLight {
                Definition : TerrainLight : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainLight/TerrainLight.j3sn

                InputMappings {
                    shininess = MatParam.Shininess
                    gLightDirection = WorldParam.LightDirection;
                    lightVec = TerrainLightDir.lightVec;

                    vLightDir = TerrainLightDir.vLightDir;
                    vViewDir = TerrainLightDir.vViewDir;

                    normal = PathTerrainNormal.normal;
                }
            }

            ShaderNode HillTerrainLight {
                Definition : TerrainLight : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainLight/TerrainLight.j3sn

                InputMappings {
                    shininess = MatParam.Shininess
                    gLightDirection = WorldParam.LightDirection;
                    lightVec = TerrainLightDir.lightVec;

                    vLightDir = TerrainLightDir.vLightDir;
                    vViewDir = TerrainLightDir.vViewDir;

                    normal = HillTerrainNormal.normal;
                }
            }

            ShaderNode MountainTerrainLight {
                Definition : TerrainLight : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainLight/TerrainLight.j3sn

                InputMappings {
                    shininess = MatParam.Shininess
                    gLightDirection = WorldParam.LightDirection;
                    lightVec = TerrainLightDir.lightVec;

                    vLightDir = TerrainLightDir.vLightDir;
                    vViewDir = TerrainLightDir.vViewDir;

                    normal = MountainTerrainNormal.normal;
                }
            }

            ShaderNode TerrainColorMix {
                Definition : TerrainColorMix : MatDefs/PBRTerrain/ShaderNodes/FragmentShaderNodes/TerrainColorMix/TerrainColorMix.j3sn

                InputMappings {
                    tex1 = PathTerrainFactor.color
                    tex2 = HillTerrainFactor.color
                    tex3 = MountainTerrainFactor.color

                    tex1Factor = PathTerrainFactor.factor
                    tex2Factor = HillTerrainFactor.factor
                    tex3Factor = MountainTerrainFactor.factor

                    ambientSum = WorldParam.AmbientLightColor
                    diffuseSum = WorldParam.LightColor

                    light1 = PathTerrainLight.light;
                    light2 = HillTerrainLight.light;
                    light3 = MountainTerrainLight.light;
                }

                OutputMappings {
                    Global.outColor = outColor
                }
            }
        }
    }
}