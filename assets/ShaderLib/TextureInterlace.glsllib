float difference(vec4 color0, vec4 color1) {
    return abs(color0.r - color1.r) +
           abs(color0.g - color1.g) +
           abs(color0.b - color1.b);
}

float rand(vec4 seedVector) {
    return fract(sin(cos(seedVector.yx + vec2(seedVector.w) + seedVector.z)).x);
}

vec4 interlaceTexture(sampler2D tex, vec2 texCoord, float scale, float randomSeed, int iterations) {
    vec4 color = texture2D(tex, texCoord * scale),
         interlacingColor = vec4(0.0);

    vec2 newTexCoord = texCoord;

    float slowedRandomSeed = randomSeed / 10.0;
    float weight = 0.0, totalWeight = 1.0;

    if(iterations > 1) {
        for(int i = 1; i <= iterations; ++i) {
            newTexCoord += vec2(
                rand(vec4(texCoord.xy, iterations, slowedRandomSeed)),
                slowedRandomSeed * float(i)
            );
            
            interlacingColor = texture2D(tex, newTexCoord * scale);
            weight = rand(vec4(i, texCoord.xy * float(i), slowedRandomSeed * float(i)));
            // if(difference(color, interlacingColor) >= 0.01) {
            if(weight >= 0.5) {
                weight /= 2.0;
                color += interlacingColor * weight;
                totalWeight += weight;
            }
        }

        color /= float(totalWeight);
    }
    return color;
}