MaterialDef TowerDefenseTerrain {
    MaterialParameters {
        Texture2D DitchTex
        Texture2D DitchNormalMap
        Texture2D DitchSpecularMap
        Texture2D DitchParallaxMap
        Float DitchTexScale
        Float DitchParallaxHeight

        Texture2D PathTex
        Texture2D PathNormalMap
        Texture2D PathSpecularMap
        Texture2D PathParallaxMap
        Float PathTexScale
        Float PathParallaxHeight

        Texture2D HillTex
        Texture2D HillNormalMap
        Texture2D HillSpecularMap
        Texture2D HillParallaxMap
        Float HillTexScale
        Float HillParallaxHeight
        
        Texture2D MountainTex
        Texture2D MountainNormalMap
        Texture2D MountainSpecularMap
        Texture2D MountainParallaxMap
        Float MountainTexScale
        Float MountainParallaxHeight

        Float DitchMaxHeight
        
        Float PathMinHeight
        Float PathMaxHeight

        Float HillMinHeight
        Float HillMaxHeight

        Float MountainMinHeight

        Boolean TriPlanarMapping
        Boolean NormalMapping
        Boolean SpecularMapping
        Boolean ParallaxMapping
        Boolean SteepParallax

        Color SpecularColor : 0 0 0 1

        Float Shininess : 1.0
    }

    Technique {

        LightMode MultiPass

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            ViewMatrix
            NormalMatrix

            LightPosition
            LightDirection

            AmbientLightColor
            LightColor
        }

        Defines {
            TRIPLANAR_MAPPING : TriPlanarMapping
            STEEP_PARALLAX : SteepParallax
            NORMAL_MAPPING : NormalMapping
            PARALLAX_MAPPING : ParallaxMapping
            SPECULAR_MAPPING : SpecularMapping
        }

        VertexShaderNodes {
            ShaderNode TerrainBaseValues {
                Definition : TerrainBaseValues : MatDefs/TowerDefenseTerrain/ShaderNodes/VertexShaderNodes/TerrainBaseValues/TerrainBaseValues.j3sn
                InputMappings {
                    inPosition = Attr.inPosition;
                    inNormal = Attr.inNormal;
                    inTexCoord = Attr.inTexCoord;
                }
            }

            ShaderNode TerrainWorldView {
                Definition : TerrainWorldView : MatDefs/TowerDefenseTerrain/ShaderNodes/VertexShaderNodes/TerrainWorldView/TerrainWorldView.j3sn

                InputMappings {
                    inPosition = TerrainBaseValues.vPosition;
                    inNormal = TerrainBaseValues.vNormal;
                    inTangent = Attr.inTangent;

                    gWorldViewMatrix = WorldParam.WorldViewMatrix;
                    gNormalMatrix = WorldParam.NormalMatrix;
                    gViewMatrix = WorldParam.ViewMatrix;

                    gLightPosition = WorldParam.LightPosition;
                    gLightColor = WorldParam.LightColor;
                }
            }

            ShaderNode TerrainLightDir {
                Definition : TerrainLightDir : MatDefs/TowerDefenseTerrain/ShaderNodes/VertexShaderNodes/TerrainLightDir/TerrainLightDir.j3sn

                InputMappings {
                    worldViewPosition = TerrainWorldView.worldViewPosition;
                    worldViewNormal = TerrainWorldView.worldViewNormal;
                    worldViewDir = TerrainWorldView.worldViewDir;
                    worldViewLightPos = TerrainWorldView.worldViewLightPos;
                    worldViewTangent = TerrainWorldView.worldViewTangent;
                    worldViewBinormal = TerrainWorldView.worldViewBinormal;
                    tangentSpaceMat = TerrainWorldView.tangentSpaceMat;
                    
                    vLightDir = Attr.inLightDir;

                    gWorldViewMatrix = WorldParam.WorldViewMatrix;
                    gNormalMatrix = WorldParam.NormalMatrix;
                    gViewMatrix = WorldParam.ViewMatrix;

                    gLightPosition = WorldParam.LightPosition;
                    gLightColor = WorldParam.LightColor;
                }
            }

            ShaderNode TerrainProjection {
                Definition : TerrainProjection : MatDefs/TowerDefenseTerrain/ShaderNodes/VertexShaderNodes/TerrainProjection/TerrainProjection.j3sn

                InputMappings {
                    worldViewProjectionMatrix = WorldParam.WorldViewProjectionMatrix
                    inPosition = TerrainBaseValues.vPosition
                    inNormal = TerrainBaseValues.vNormal
                }

                OutputMappings {
                    Global.outPosition = projPosition
                }
            }
        }

        FragmentShaderNodes {
            ShaderNode TerrainTriplanarBlending {
                Definition : TerrainTriplanarBlending : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainTriplanarBlending/TerrainTriplanarBlending.j3sn

                InputMappings {
                    vNormal = TerrainBaseValues.vNormal;
                }
            }

            ShaderNode DitchTerrainParallax {
                Definition : TerrainParallax : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainParallax/TerrainParallax.j3sn

                InputMappings {
                    vVertex = TerrainBaseValues.vPosition;
                    vViewDirParallax = TerrainLightDir.vViewDirParallax;
                    blending = TerrainTriplanarBlending.blending;
                    texCoord = TerrainBaseValues.texCoord;

                    parallaxHeight = MatParam.DitchParallaxHeight;

                    parallaxMapTex = MatParam.DitchParallaxMap;
                    texScale = MatParam.DitchTexScale;
                }
            }

            ShaderNode PathTerrainParallax {
                Definition : TerrainParallax : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainParallax/TerrainParallax.j3sn

                InputMappings {
                    vVertex = TerrainBaseValues.vPosition;
                    vViewDirParallax = TerrainLightDir.vViewDirParallax;
                    blending = TerrainTriplanarBlending.blending;
                    texCoord = TerrainBaseValues.texCoord;

                    parallaxHeight = MatParam.PathParallaxHeight;

                    parallaxMapTex = MatParam.PathParallaxMap;
                    texScale = MatParam.PathTexScale;
                }
            }

            ShaderNode HillTerrainParallax {
                Definition : TerrainParallax : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainParallax/TerrainParallax.j3sn

                InputMappings {
                    vVertex = TerrainBaseValues.vPosition;
                    vViewDirParallax = TerrainLightDir.vViewDirParallax;
                    blending = TerrainTriplanarBlending.blending;
                    texCoord = TerrainBaseValues.texCoord;

                    parallaxHeight = MatParam.HillParallaxHeight;

                    parallaxMapTex = MatParam.HillParallaxMap;
                    texScale = MatParam.HillTexScale;
                }
            }

            ShaderNode MountainTerrainParallax {
                Definition : TerrainParallax : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainParallax/TerrainParallax.j3sn

                InputMappings {
                    vVertex = TerrainBaseValues.vPosition;
                    vViewDirParallax = TerrainLightDir.vViewDirParallax;
                    blending = TerrainTriplanarBlending.blending;
                    texCoord = TerrainBaseValues.texCoord;

                    parallaxHeight = MatParam.MountainParallaxHeight;

                    parallaxMapTex = MatParam.MountainParallaxMap;
                    texScale = MatParam.MountainTexScale;
                }
            }

            ShaderNode DitchTerrainFactor {
                Definition : TerrainLowestFactor : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainFactor/TerrainLowestFactor.j3sn
                
                InputMappings {               
                    vPosition = TerrainBaseValues.vPosition;
                    vVertex = DitchTerrainParallax.vVertexParallax;
                    texCoord = DitchTerrainParallax.texCoordParallax;

                    Tex = MatParam.DitchTex;
                    TexScale = MatParam.DitchTexScale;
                    blending = TerrainTriplanarBlending.blending;

                    LayerMaxHeight = MatParam.DitchMaxHeight;

                    NextLayerMinHeight = MatParam.PathMinHeight;
                }
            }

            ShaderNode PathTerrainFactor {
                Definition : TerrainFactor : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainFactor/TerrainFactor.j3sn
                
                InputMappings {               
                    vPosition = TerrainBaseValues.vPosition;
                    vVertex = PathTerrainParallax.vVertexParallax;
                    texCoord = PathTerrainParallax.texCoordParallax;

                    Tex = MatParam.PathTex;
                    TexScale = MatParam.PathTexScale;
                    blending = TerrainTriplanarBlending.blending;

                    LayerMinHeight = MatParam.PathMinHeight;
                    LayerMaxHeight = MatParam.PathMaxHeight;

                    NextLayerMinHeight = MatParam.HillMinHeight;
                }
            }

            ShaderNode HillTerrainFactor {
                Definition : TerrainFactor : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainFactor/TerrainFactor.j3sn
                
                InputMappings {
                    vPosition = TerrainBaseValues.vPosition;
                    vVertex = HillTerrainParallax.vVertexParallax;
                    texCoord = HillTerrainParallax.texCoordParallax;

                    Tex = MatParam.HillTex;
                    TexScale = MatParam.HillTexScale;
                    blending = TerrainTriplanarBlending.blending;

                    PrevLayerMaxHeight = MatParam.PathMaxHeight;

                    LayerMinHeight = MatParam.HillMinHeight;
                    LayerMaxHeight = MatParam.HillMaxHeight;

                    NextLayerMinHeight = MatParam.MountainMinHeight;
                }
            }

            ShaderNode MountainTerrainFactor {
                Definition : TerrainHighestFactor : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainFactor/TerrainHighestFactor.j3sn
                
                InputMappings {
                    vPosition = TerrainBaseValues.vPosition;
                    vVertex = MountainTerrainParallax.vVertexParallax;
                    texCoord = MountainTerrainParallax.texCoordParallax;

                    Tex = MatParam.MountainTex;
                    TexScale = MatParam.MountainTexScale;
                    blending = TerrainTriplanarBlending.blending;

                    PrevLayerMaxHeight = MatParam.HillMaxHeight;

                    LayerMinHeight = MatParam.MountainMinHeight;
                }
            }

            ShaderNode DitchTerrainNormal {
                Definition : TerrainNormal : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainNormal/TerrainNormal.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainBaseValues.vPosition;
                    vNormal = TerrainWorldView.worldViewNormal;

                    NormalMapTex = MatParam.DitchNormalMap;
                    texCoord = DitchTerrainParallax.texCoordParallax;
                    TexScale = MatParam.DitchTexScale;
                }
            }

            ShaderNode PathTerrainNormal {
                Definition : TerrainNormal : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainNormal/TerrainNormal.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainBaseValues.vPosition;
                    vNormal = TerrainWorldView.worldViewNormal;

                    NormalMapTex = MatParam.PathNormalMap;
                    texCoord = PathTerrainParallax.texCoordParallax;
                    TexScale = MatParam.PathTexScale;
                }
            }

            ShaderNode HillTerrainNormal {
                Definition : TerrainNormal : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainNormal/TerrainNormal.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainBaseValues.vPosition;
                    vNormal = TerrainWorldView.worldViewNormal;

                    NormalMapTex = MatParam.HillNormalMap;
                    texCoord = HillTerrainParallax.texCoordParallax;
                    TexScale = MatParam.HillTexScale;
                }
            }

            ShaderNode MountainTerrainNormal {
                Definition : TerrainNormal : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainNormal/TerrainNormal.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainBaseValues.vPosition;
                    vNormal = TerrainWorldView.worldViewNormal;

                    NormalMapTex = MatParam.MountainNormalMap;
                    texCoord = MountainTerrainParallax.texCoordParallax;
                    TexScale = MatParam.MountainTexScale;
                }
            }

            ShaderNode DitchTerrainShininess {
                Definition : TerrainShininess : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainShininess/TerrainShininess.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainBaseValues.vPosition;

                    SpecularMapTex = MatParam.DitchSpecularMap;
                    texCoord = DitchTerrainParallax.texCoordParallax;
                    TexScale = MatParam.DitchTexScale;

                    fixedShininess = MatParam.Shininess;
                }
            }

            ShaderNode PathTerrainShininess {
                Definition : TerrainShininess : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainShininess/TerrainShininess.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainBaseValues.vPosition;

                    SpecularMapTex = MatParam.PathSpecularMap;
                    texCoord = PathTerrainParallax.texCoordParallax;
                    TexScale = MatParam.PathTexScale;

                    fixedShininess = MatParam.Shininess;
                }
            }

            ShaderNode HillTerrainShininess {
                Definition : TerrainShininess : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainShininess/TerrainShininess.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainBaseValues.vPosition;

                    SpecularMapTex = MatParam.HillSpecularMap;
                    texCoord = HillTerrainParallax.texCoordParallax;
                    TexScale = MatParam.HillTexScale;

                    fixedShininess = MatParam.Shininess;
                }
            }

            ShaderNode MountainTerrainShininess {
                Definition : TerrainShininess : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainShininess/TerrainShininess.j3sn

                InputMappings {
                    blending = TerrainTriplanarBlending.blending
                    vVertex = TerrainBaseValues.vPosition;

                    SpecularMapTex = MatParam.MountainSpecularMap;
                    texCoord = MountainTerrainParallax.texCoordParallax;
                    TexScale = MatParam.MountainTexScale;

                    fixedShininess = MatParam.Shininess;
                }
            }

            ShaderNode DitchTerrainLight {
                Definition : TerrainLight : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainLight/TerrainLight.j3sn

                InputMappings {
                    shininess = DitchTerrainShininess.shininess
                    gLightDirection = WorldParam.LightDirection;
                    lightVec = TerrainLightDir.lightVec;

                    vLightDir = TerrainLightDir.vLightDir;
                    vViewDir = TerrainLightDir.vViewDir;

                    normal = DitchTerrainNormal.normal;
                }
            }

            ShaderNode PathTerrainLight {
                Definition : TerrainLight : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainLight/TerrainLight.j3sn

                InputMappings {
                    shininess = PathTerrainShininess.shininess
                    gLightDirection = WorldParam.LightDirection;
                    lightVec = TerrainLightDir.lightVec;

                    vLightDir = TerrainLightDir.vLightDir;
                    vViewDir = TerrainLightDir.vViewDir;

                    normal = PathTerrainNormal.normal;
                }
            }

            ShaderNode HillTerrainLight {
                Definition : TerrainLight : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainLight/TerrainLight.j3sn

                InputMappings {
                    shininess = HillTerrainShininess.shininess
                    gLightDirection = WorldParam.LightDirection;
                    lightVec = TerrainLightDir.lightVec;

                    vLightDir = TerrainLightDir.vLightDir;
                    vViewDir = TerrainLightDir.vViewDir;

                    normal = HillTerrainNormal.normal;
                }
            }

            ShaderNode MountainTerrainLight {
                Definition : TerrainLight : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainLight/TerrainLight.j3sn

                InputMappings {
                    shininess = MountainTerrainShininess.shininess
                    gLightDirection = WorldParam.LightDirection;
                    lightVec = TerrainLightDir.lightVec;

                    vLightDir = TerrainLightDir.vLightDir;
                    vViewDir = TerrainLightDir.vViewDir;

                    normal = MountainTerrainNormal.normal;
                }
            }

            ShaderNode TerrainColorMix {
                Definition : TerrainColorMix : MatDefs/TowerDefenseTerrain/ShaderNodes/FragmentShaderNodes/TerrainColorMix/TerrainColorMix.j3sn

                InputMappings {
                    ditchColor = DitchTerrainFactor.color
                    pathColor = PathTerrainFactor.color
                    hillColor = HillTerrainFactor.color
                    mountainColor = MountainTerrainFactor.color

                    ditchFactor = DitchTerrainFactor.factor
                    pathFactor = PathTerrainFactor.factor
                    hillFactor = HillTerrainFactor.factor
                    mountainFactor = MountainTerrainFactor.factor

                    ambientSum = WorldParam.AmbientLightColor
                    diffuseSum = WorldParam.LightColor
                    specularSum = MatParam.SpecularColor;

                    ditchLight = DitchTerrainLight.light;
                    pathLight = PathTerrainLight.light;
                    hillLight = HillTerrainLight.light;
                    mountainLight = MountainTerrainLight.light;
                }

                OutputMappings {
                    Global.outColor = outColor
                }
            }
        }
    }
}